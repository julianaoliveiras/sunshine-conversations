import hat from 'hat';
import * as httpMock from '../../mocks/http';
import { getAuthenticationHeaders } from '../../../src/utils/auth';
import { NotificationsApi } from '../../../src/api/notifications';
import { testJwt } from '../../mocks/jwt';
import { buildTestHeaders } from '../testHeadersBuilder';
import packageInfo from '../../../package.json';

describe('Notifications API', () => {
    const scope = 'app';
    const appId = 'app-id';
    const serviceUrl = 'http://some-url.com';
    const authHeaders = getAuthenticationHeaders({
        jwt: testJwt(),
    });

    let httpSpy;
    let api;

    beforeEach(() => {
        httpSpy = httpMock.mock();
        api = new NotificationsApi({
            serviceUrl,
            authHeaders,
            scope,
            VERSION: packageInfo.version,
        });
    });

    afterEach(() => {
        httpMock.restore();
    });

    describe('#send', () => {
        it('should call http', () => {
            const notification = {
                destination: {
                    integrationId: hat(),
                    destinationId: hat(),
                },
                message: {
                    text: 'this is a message',
                },
            };

            return api.postNotification(appId, notification).then(() => {
                const fullUrl = `${serviceUrl}/v1.1/apps/${appId}/notifications`;
                httpSpy.should.have.been.calledWith('POST', fullUrl, notification, buildTestHeaders(authHeaders));
            });
        });
    });
});
