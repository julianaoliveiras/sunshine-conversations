import * as httpMock from '../../mocks/http';
import { getAuthenticationHeaders } from '../../../src/utils/auth';
import { testJwt } from '../../mocks/jwt';
import { buildTestHeaders } from '../testHeadersBuilder';
import packageInfo from '../../../package.json';
import { IntegrationMessageTemplatesApi } from '../../../src/api/integrationMessageTemplates';

describe('Integration Message Templates API', () => {
    const serviceUrl = 'http://some-url.com';
    const missingParams = 'incorrect number of parameters';
    const authHeaders = getAuthenticationHeaders({
        jwt: testJwt(),
    });
    const scope = 'account';
    const appId = 'appid_12345';
    const integrationId = 'integrationid_12345';
    let httpSpy;
    let api;

    beforeEach(() => {
        httpSpy = httpMock.mock();
        api = new IntegrationMessageTemplatesApi({
            serviceUrl,
            authHeaders,
            scope,
            VERSION: packageInfo.version,
        });
    });

    afterEach(() => {
        httpMock.restore();
    });

    describe('#create', () => {
        it('should call http', () => {
            return Promise.all([
                api.create(appId, integrationId, { test: 'blablah' }),
                api.create({
                    appId,
                    integrationId,
                    messageTemplate: { test: 'blablah' },
                }),
            ]).then((results) => {
                const fullUrl = `${serviceUrl}/v1.1/apps/${appId}/integrations/${integrationId}/messageTemplates`;
                httpSpy.should.have.callCount(results.length);

                httpSpy
                    .getCall(0)
                    .should.have.been.calledWith('POST', fullUrl, { test: 'blablah' }, buildTestHeaders(authHeaders));
                httpSpy
                    .getCall(1)
                    .should.have.been.calledWith('POST', fullUrl, { test: 'blablah' }, buildTestHeaders(authHeaders));
            });
        });

        it('should throw if missing integrationId', () => {
            expect(() => api.create(appId)).to.throw(Error, missingParams);
        });

        it('should throw if missing messageTemplate', () => {
            expect(() => api.create(appId, integrationId)).to.throw(Error, missingParams);
        });
    });

    describe('#list', () => {
        it('should call http', () => {
            return Promise.all([
                api.list(appId, integrationId),
                api.list({
                    appId,
                    integrationId,
                    query: { name: 'name', previous: 'previous', next: 'next', limit: 'limit' },
                }),
            ]).then((results) => {
                const fullUrl = `${serviceUrl}/v1.1/apps/${appId}/integrations/${integrationId}/messageTemplates`;
                httpSpy.should.have.callCount(results.length);

                httpSpy
                    .getCall(0)
                    .should.have.been.calledWith('GET', fullUrl, undefined, buildTestHeaders(authHeaders));
                httpSpy
                    .getCall(1)
                    .should.have.been.calledWith(
                        'GET',
                        fullUrl,
                        { name: 'name', previous: 'previous', next: 'next', limit: 'limit' },
                        buildTestHeaders(authHeaders),
                    );
            });
        });

        it('should throw if missing integrationId', () => {
            expect(() => api.list(appId)).to.throw(Error, missingParams);
        });
    });

    describe('#delete', () => {
        it('should call http', () => {
            return Promise.all([
                api.delete(appId, integrationId, 'somename'),
                api.delete({ appId, integrationId, messageTemplateName: 'somename' }),
            ]).then((results) => {
                const fullUrl = `${serviceUrl}/v1.1/apps/${appId}/integrations/${integrationId}/messageTemplates/somename`;
                httpSpy.should.have.callCount(results.length);
                httpSpy.should.have.been.calledWith('DELETE', fullUrl, undefined, buildTestHeaders(authHeaders));
            });
        });

        it('should throw if missing integrationId', () => {
            expect(() => api.delete(appId)).to.throw(Error, missingParams);
        });

        it('should throw if missing messageTemplateName', () => {
            expect(() => api.delete(appId, integrationId)).to.throw(Error, missingParams);
        });
    });
});
