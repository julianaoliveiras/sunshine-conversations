'use strict';

exports.__esModule = true;
exports.NotificationsApi = undefined;

var _base = require('./base');

var _smoochMethod = require('../utils/smoochMethod');

var _smoochMethod2 = _interopRequireDefault(_smoochMethod);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @constructor
 * @name NotificationsApi
 * @extends BaseApi
 */
var NotificationsApi = exports.NotificationsApi = function (_BaseApi) {
    _inherits(NotificationsApi, _BaseApi);

    function NotificationsApi() {
        _classCallCheck(this, NotificationsApi);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, _BaseApi.call.apply(_BaseApi, [this].concat(args)));

        _this.requireAppId = true;
        return _this;
    }

    return NotificationsApi;
}(_base.BaseApi);

Object.assign(NotificationsApi.prototype, {
    /**
     * Send a notification
     * @memberof NotificationsApi.prototype
     * @method postNotification
     * @param  {Notification} notification
     * @return {APIResponse}
     */
    postNotification: (0, _smoochMethod2.default)({
        params: ['notification'],
        path: '/notifications',
        method: 'POST'
    })
});